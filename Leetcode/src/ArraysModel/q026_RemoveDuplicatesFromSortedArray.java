package ArraysModel;

/**
 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

 示例 1:

 给定数组 nums = [1,1,2],

 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。

 你不需要考虑数组中超出新长度后面的元素。
 示例 2:

 给定 nums = [0,0,1,1,1,2,2,3,3,4],

 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。

 你不需要考虑数组中超出新长度后面的元素。
 说明:

 为什么返回数值是整数，但输出的答案是数组呢?

 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

 你可以想象内部操作如下:

 // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
 int len = removeDuplicates(nums);

 // 在函数里修改输入数组对于调用者是可见的。
 // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 for (int i = 0; i < len; i++) {
 print(nums[i]);
 }
 */

/**
 * 解体思路：
 * 设置双指针，一个从0开始，一个从1开始，然后从1开始后指针判断是否和前指针相同，如果相同继续前进，如果不同，前指针移动一位，然后设置前指针现在的位置
 * 为后指针当前的值，从而达到消除重复数据的目的
 * 最后返回值应该是 前指针计数 + 1，因为前指针从0开始，第一位也应该算进去
 *
 * 0p  1p
 *
 * 1---1--2--3--3--4--5--6--7----------- （一）
 *
 * 0p     1p
 * 1---1--2--3--3--4--5--6--7----------- （二）
 *
 *     0p    1p
 * 1---2--2--3--3--4--5--6--7----------- （三）
 *
 */

public class q026_RemoveDuplicatesFromSortedArray {
    public static int removeDuplicates(int[] nums) {
        int len = 0;
        int j=0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[j] != nums[i]) {
                j++;
                nums[j] = nums[i];
            }
        }
        return j+1;
    }

    public static void main(String[] args) {
        int[] nums = {0,0,1,1,1,2,2,3,3,4};
        int len = removeDuplicates(nums);
        System.out.println(len == 5);
        for (int i = 0; i < len; i++) {
            System.out.println(nums[i]);
        }
    }
}
